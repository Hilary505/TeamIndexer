{"13302123027441558785":{"Source":"","Data":"nse that’s much bigger than expected, the function will keep reading and allocating memory until either it finishes or the system runs out of memory.\n\nTake a scenario where you want to count how many times the letter ‘a’ appears in a file. If you use io.ReadAll to read the entire file first and then count the letter ‘a’, that’s a bit overkill.\n\nIn situations like this, io.ReadAll isn’t the best option. Streaming or processing the data incrementally as you read it would be way more efficient.\n\n    “So, what should I do? Read it manually?”\n\nExactly.\n\nYou can process each chunk of data as it’s read, count the letter ‘a’, and then move on, without storing the whole file in memory. This solution works well when you’re reading from a file or a network stream, and it allows you to do other things, too.\n\nWhen you’re in these kinds of scenarios: passing data between systems, forwarding an HTTP request body, reading a file and sending it over a network, or downloading something and saving it, you’ve got a great tool: io.Copy - a real lifesaver.\n\nfunc Copy(dst Writer, src Reader) (written int64, err error) { ... }\n\nGo\nThe beauty of io.Copy is that it uses a fixed 32KB buffer to handle the transfer.\u0000","ID":3},"7225745482703552544":{"Source":"","Data":"!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eForum\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"createpost.css\"\u003e\n\u003c/head\u003e\n\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"header\"\u003e\n            \u003ch1\u003eForum\u003c/h1\u003e \n            \u003cbutton id=\"createPostBtn\" class=\"create-post-btn\"\u003e \n                \u003ci data-lucide=\"plus-circle\"\u003e\u003c/i\u003e\n                Create Post \u003c/button\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv id=\"modal\" class=\"modal\"\u003e\n        \u003cdiv class=\"modal-content\"\u003e\n            \u003ch2\u003eCreate a New Post\u003c/h2\u003e\n            \u003cform id=\"postForm\"\u003e\n                \u003cdiv class=\"form-group\"\u003e \n                    \u003clabel\u003eTitle\u003c/label\u003e \n                    \u003cinput type=\"text\" id=\"title\" required\u003e \n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e \n                    \u003clabel\u003eCategory\u003c/label\u003e \n                    \u003cselect id=\"category\" required\u003e\n                        \u003coption value=\"\"\u003eSelect a category\u003c/option\u003e\n                        \u003coption value=\"Tutorial\"\u003eTutorial\u003c/option\u003e\n                        \u003coption value=\"Discussion\"\u003eDiscussion\u003c/option\u003e\n                        \u003coption value=\"Guide\"\u003eGuide\u003c/option\u003e\n                        \u003coption value=\"Question\"\u003eQuestion\u003c/option\u003e\n                    \u003c/select\u003e \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e \n                        \u003clabel\u003eContent\u003c/label\u003e \n                        \u003ctextarea id=\"postContent\" rows=\"4\" required\u003e\u003c/textarea\u003e \n                    \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e \n                    \u003clabel\u003eAdd Media\u003c/label\u003e\n                    \u003cdiv class=\"media-options\"\u003e\n                        \u003cdiv class=\"image-upload\"\u003e \n                            \u003clabel for=\"imageUpload\" class=\"upload-btn\"\u003e \n                                \u003ci data-lucide=\"image\"\u003e\u003c/i\u003e Upload Image \u003c/label\u003e \n                            \u003cinput type=\"file\"\n                                id=\"imageUpload\" \n                                accept=\".jpg,.jpeg,.png,.gif,image/jpeg,image/png,image/gif\" \n                                class=\"hidden\"\n                            \u003e \n                            \u003cdiv class=\"upload-info\"\u003e \n                                \u003csmall\u003eAccepted formats: JPEG, PNG, GIF (max 20MB)\u003c/small\u003e \n                                \u003cdiv id=\"uploadError\" class=\"upload-error hidden\"\u003e\u003c/div\u003e \n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"video-upload\"\u003e \n                            \u003cinput \n                                type=\"url\" \n                                id=\"videoLink\"\n                                placeholder=\"Paste video URL (YouTube/Vimeo)\"\n                            \u003e \n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv id=\"mediaPreview\" class=\"media-preview hidden\"\u003e\n                    \u003cdiv id=\"imagePreviewContainer\" class=\"image-preview-container hidden\"\u003e \n                        \u003cimg id=\"imagePreview\"\n                            src=\"\" \n                            alt=\"Preview\"\n                            \u003e \n                            \u003cbutton \n                            type=\"button\" \n                            id=\"removeImage\" \n                            class=\"remove-media\"\n                            \u003e \n                            \u003ci data-lucide=\"x\"\u003e\u003c/i\u003e \n                        \u003c/button\u003e \n                    \u003c/div\u003e\n                    \u003cdiv id=\"videoPreviewContainer\" class=\"video-preview-container hidden\"\u003e\n                        \u003cdiv id=\"videoPreview\"\u003e\u003c/div\u003e \u003cbutton type=\"button\" id=\"removeVideo\" class=\"remove-media\"\u003e\n                            \u003ci data-lucide=\"x\"\u003e\u003c/i\u003e \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-actions\"\u003e \u003cbutton type=\"button\" id=\"cancelBtn\" class=\"cancel-btn\"\u003eCancel\u003c/button\u003e\n                    \u003cbutton type=\"submit\" class=\"submit-btn\"\u003eCreate Post\u003c/button\u003e \u003c/div\u003e\n            \u003c/form\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cscript src=\"createposts.js\" type=\"module\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n\n\u003c/html\u003e\n\u003c!DOCTYP","ID":1},"8658286150530120276":{"Source":"","Data":" html\u003e\n\u003chtml lang=\"en\"\u003e\n\n\u003cIf you call io.ReadAll on a very large data stream, like a massive file or an HTTP response that’s much bigger than expected, the function will keep reading and allocating memory until either it finishes or the system runs out of memory.\n\nTake a scenario where you want to count how many times the letter ‘a’ appears in a file. If you use io.ReadAll to read the entire file first and then count the letter ‘a’, that’s a bit overkill.\n\nIn situations like this, io.ReadAll isn’t the best option. Streaming or processing the data incrementally as you read it would be way more efficient.\n\n    “So, what should I do? Read it manually?”\n\nExactly.\n\nYou can process each chunk of data as it’s read, count the letter ‘a’, and then move on, without storing the whole file in memory. This solution works well when you’re reading from a file or a network stream, and it allows you to do other things, too.\n\nWhen you’re in these kinds of scenarios: passing data between systems, forwarding an HTTP request body, reading a file and sending it over a network, or downloading something and saving it, you’ve got a great tool: io.Copy - a real lifesaver.\n\nfunc Copy(dst Writer, src Reader) (written int64, err error) { ... }\n\nGo\nThe beauty of io.Copy is that it uses a fixed 32KB buffer to handle the transfer.\n\u003c/html\u003e\nIf you call io.ReadAll on a very large data stream, like a massive file or an HTTP response that’s much bigger than expected, the function will keep reading and allocating memory until either it finishes or the system runs out of memory.\n\nTake a scenario where you want to count how many times the letter ‘a’ appears in a file. If you use io.ReadAll to read the entire file first and then count the letter ‘a’, that’s a bit overkill.\n\nIn situations like this, io.ReadAll isn’t the best option. Streaming or processing the data incrementally as you read it would be way more efficient.\n\n    “So, what should I do? Read it manually?”\n\nExactly.\n\nYou can process each chunk of data as it’s read, count the letter ‘a’, and then move on, without storing the whole file in memory. This solution works well when you’re reading from a file or a network stream, and it allows you to do other things, too.\n\nWhen you’re in these kinds of scenarios: passing data between systems, forwarding an HTTP request body, reading a file and sending it over a network, or downloading something and saving it, you’ve got a great tool: io.Copy - a real lifesaver.\n\nfunc Copy(dst Writer, src Reader) (written int64, err error) { ... }\n\nGo\nThe beauty of io.Copy is that it uses a fixed 32KB buffer to handle the transfer.\nIf you call io.ReadAll on a very large data stream, like a massive file or an HTTP response that’s much bigger than expected, the function will keep reading and allocating memory until either it finishes or the system runs out of memory.\n\nTake a scenario where you want to count how many times the letter ‘a’ appears in a file. If you use io.ReadAll to read the entire file first and then count the letter ‘a’, that’s a bit overkill.\n\nIn situations like this, io.ReadAll isn’t the best option. Streaming or processing the data incrementally as you read it would be way more efficient.\n\n    “So, what should I do? Read it manually?”\n\nExactly.\n\nYou can process each chunk of data as it’s read, count the letter ‘a’, and then move on, without storing the whole file in memory. This solution works well when you’re reading from a file or a network stream, and it allows you to do other things, too.\n\nWhen you’re in these kinds of scenarios: passing data between systems, forwarding an HTTP request body, reading a file and sending it over a network, or downloading something and saving it, you’ve got a great tool: io.Copy - a real lifesaver.\n\nfunc Copy(dst Writer, src Reader) (written int64, err error) { ... }\n\nGo\nThe beauty of io.Copy is that it uses a fixed 32KB buffer to handle the transfer.\nIf you call io.ReadAll on a very large data stream, like a massive file or an HTTP resp","ID":2}}